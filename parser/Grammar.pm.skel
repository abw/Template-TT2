#============================================================= -*-Perl-*-
#
# Template::TT2::Grammar
#
# DESCRIPTION
#   Grammar file for the Template Toolkit language containing token
#   definitions and parser state/rules tables generated by Parse::Yapp.
#
# AUTHOR
#   Andy Wardley   <abw@wardley.org>
#
# IMPORTANT NOTE
#   This module is constructed from the parser/Grammar.pm.skel file by
#   running the parser/yc script.  You only need to do this if # you
#   have modified the grammar in the parser/Parser.yp file and need #
#   to-recompile it.  See the README in the 'parser' directory for
#   more information (sub-directory of the Template distribution).
#
#========================================================================

package Template::TT2::Grammar;

use Template::TT2::Class
    version => 0.01,
    debug   => 0,
    base    => 'Template::TT2::Base',
    exports => {
        any => '@TABLE_NAMES',
    };

our %CMPOP = qw( 
    != ne
    == eq
    <  <
    >  >
    >= >=
    <= <=
);

our $LEXTABLE = {
    # special cases
    'FOREACH' => 'FOR',
    'BREAK'   => 'LAST',
    '&&'      => 'AND',
    '||'      => 'OR',
    '!'       => 'NOT',
    '|'       => 'FILTER',
    '.'       => 'DOT',
    '_'       => 'CAT',
    '..'      => 'TO',
    '='       => 'ASSIGN',
    '=>'      => 'ASSIGN',
    ','       => 'COMMA',
    '\\'      => 'REF',
    'and'     => 'AND',     # explicitly specified so that 'and', 'or'
    'or'      => 'OR',      # and 'not' can always be used in lower case, 
    'not'     => 'NOT',     # regardless of ANYCASE flag
    'mod'     => 'MOD',
    'div'     => 'DIV',
    (
        # reserved keywords and terminal tokens are mapped to themselves,
        map { $_ => $_ }
        qw(
            GET CALL SET DEFAULT INSERT INCLUDE PROCESS WRAPPER BLOCK END
            USE PLUGIN FILTER MACRO PERL RAWPERL TO STEP AND OR NOT DIV MOD
            IF UNLESS ELSE ELSIF FOR NEXT WHILE SWITCH CASE META IN
            TRY THROW CATCH FINAL LAST RETURN STOP CLEAR VIEW DEBUG
        ),
        qw< ( ) [ ] { } ${ $ + / ; : ? >
    ),
    (
        # binary mathematical operators map to BINOP
        map { $_ => 'BINOP' }
        qw< - * % >              # '+' and '/' are defined above
    ),
    (
        # binary comparison operators map to CMPOP
        map { $_ => 'CMPOP' }
        keys %CMPOP,
    ),
};

our ($STATES, $RULES);      # defined below with generated states/rules
our $DEFAULTS = {           # for init_defaults() in Template::TT2::Base
    LEXTABLE => $LEXTABLE,  # note that the values here have no real effect
    STATES   => $STATES,    # as init_defaults() will use the $LEXTABLE,
    RULES    => $RULES,     # $STATES and $RULES package vars anyway
};
our @TABLE_NAMES = qw( LEXTABLE STATES RULES );

our ($factory, $rawstart);  # internal state vars used by parser rules


sub init {
    my ($self, $config) = @_;
    $self->init_defaults($config);
    return $self;
}

sub install_factory {
    my $self = shift;
    $factory = shift;
}

sub tables {
    my $self = shift;
    return @$self{ @TABLE_NAMES };
}

#-----------------------------------------------------------------------
# end of user generated code... over to the machines...
#-----------------------------------------------------------------------


#========================================================================
# States - generated from parser/parser.yp
#========================================================================

$STATES = <<$states>>; 


#========================================================================
# Rules - generated from parser/parser.yp
#========================================================================

$RULES = <<$rules>>;



1;

__END__

=head1 NAME

Template::TT2::Grammar - Parser state/rule tables for the TT2 grammar

=head1 SYNOPSIS

    # no user serviceable parts inside

=head1 DESCRIPTION

This module defines the state and rule tables that the
L<Template::TT2::Parser> module uses to parse templates. It is generated from
a YACC-like grammar using the C<Parse::Yapp> module. The F<parser>
sub-directory of the Template Toolkit source distribution contains the grammar
and other files required to generate this module.

But you don't need to worry about any of that unless you're planning to 
modify the Template Toolkit language.

=head1 AUTHOR

Andy Wardley L<http://wardley.org/>

=head1 COPYRIGHT

Copyright (C) 1996-2008 Andy Wardley.  All Rights Reserved.

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

=head1 SEE ALSO

L<Template::TT2::Parser>

=cut

# Local Variables:
# mode: perl
# perl-indent-level: 4
# indent-tabs-mode: nil
# End:
#
# vim: expandtab shiftwidth=4:










